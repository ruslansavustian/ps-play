import { Injectable } from '@nestjs/common';
import { Order } from 'src/order/order.entity';
import * as TelegramBot from 'node-telegram-bot-api';

interface TicketData {
  id: string;
  userName: string;
  initialMessage: string;
}

@Injectable()
export class TelegramService {
  private bot: TelegramBot | null = null;

  constructor() {
    const token = process.env.TELEGRAM_BOT_TOKEN;

    if (token) {
      try {
        this.bot = new TelegramBot(token, {
          polling: false,
        });
      } catch (error) {
        console.error(
          '‚ùå [TELEGRAM] Failed to create TelegramBot instance:',
          error,
        );
      }
    } else {
      console.warn(
        '‚ö†Ô∏è [TELEGRAM] TELEGRAM_BOT_TOKEN not found in environment variables',
      );
      console.warn(
        '‚ö†Ô∏è [TELEGRAM] Available env vars:',
        Object.keys(process.env).filter((key) => key.includes('TELEGRAM')),
      );
    }
  }

  async sendNotification(message: string) {
    if (!this.bot) {
      console.warn('‚ö†Ô∏è [TELEGRAM] Telegram bot not initialized');
      return;
    }

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∞—à —á–∞—Ç
      const targetChatId = process.env.TELEGRAM_CHAT_ID;

      if (!targetChatId) {
        console.warn(
          '‚ö†Ô∏è [TELEGRAM] TELEGRAM_CHAT_ID not found in environment variables',
        );
        return;
      }

      await this.bot.sendMessage(targetChatId, message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      });
    } catch (error: any) {
      console.error('‚ùå [TELEGRAM] Telegram notification failed:', error);
    }
  }

  async sendOrderNotification(orderData: Order) {
    const message = `
üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>

üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>
‚Ä¢ ID: ${orderData.id}
‚Ä¢ –ö–ª–∏–µ–Ω—Ç: ${orderData.customerName}
‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º: ${orderData.telegram}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}
‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${orderData.platform}
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç: ${orderData.accountId}
‚Ä¢ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderData.notes}


    `;

    await this.sendNotification(message);
  }

  async sendSupportNotification(ticketData: TicketData) {
    const message = `
üÜò <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${ticketData.userName}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${ticketData.initialMessage}
üìÖ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}

üîó <a href="${process.env.FRONTEND_URL}/admin/support/${ticketData.id}">–û—Ç–≤–µ—Ç–∏—Ç—å</a>
    `;

    await this.sendNotification(message);
  }
}
