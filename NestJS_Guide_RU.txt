🚀 ПОЛНОЕ РУКОВОДСТВО ПО NESTJS ДЛЯ FRONTEND РАЗРАБОТЧИКА
================================================================

📋 СОДЕРЖАНИЕ:
1. Что такое NestJS
2. Структура проекта
3. Основные концепции
4. Как работает аутентификация в нашем проекте
5. Файлы конфигурации
6. Где что настраивать
7. Как изучать дальше

================================================================
1. ЧТО ТАКОЕ NESTJS
================================================================

NestJS - это фреймворк для Node.js, который помогает создавать масштабируемые серверные приложения.

🔥 ГЛАВНЫЕ ОСОБЕННОСТИ:
- Использует TypeScript по умолчанию
- Архитектура похожа на Angular (декораторы, модули, DI)
- Встроенная поддержка REST API, GraphQL, WebSockets
- Мощная система валидации
- Легко тестируется

🎯 АНАЛОГИЯ ДЛЯ FRONTEND:
- Если React/Vue - это для фронтенда
- То NestJS - это React/Vue для бэкенда
- Компоненты → Контроллеры
- Сервисы → Сервисы
- Модули → Модули

================================================================
2. СТРУКТУРА НАШЕГО ПРОЕКТА
================================================================

backend/
├── src/                           # Основной код
│   ├── main.ts                   # 🔥 ВХОДНАЯ ТОЧКА - запуск сервера
│   ├── app.module.ts             # 🔥 ГЛАВНЫЙ МОДУЛЬ - подключает все остальные
│   ├── app.controller.ts         # Основной контроллер
│   ├── app.service.ts           # Основной сервис
│   │
│   ├── auth/                     # 📁 МОДУЛЬ АУТЕНТИФИКАЦИИ
│   │   ├── auth.module.ts        # Настройки модуля авторизации
│   │   ├── auth.controller.ts    # API endpoints (/auth/login, /auth/register)
│   │   ├── auth.service.ts       # Логика аутентификации
│   │   ├── jwt.strategy.ts       # Стратегия JWT токенов
│   │   ├── jwt-auth.guard.ts     # Защита роутов (middleware)
│   │   └── dto/                  # Валидация данных
│   │       ├── login.dto.ts      # Схема для логина
│   │       └── register.dto.ts   # Схема для регистрации
│   │
│   └── user/                     # 📁 МОДУЛЬ ПОЛЬЗОВАТЕЛЕЙ
│       ├── user.service.ts       # Работа с пользователями
│       ├── user.interface.ts     # Типы данных
│       └── mock-data.ts          # 🔥 МОКОВЫЕ ДАННЫЕ (здесь наши тестовые юзеры)
│
├── package.json                  # Зависимости
├── nest-cli.json                 # Настройки NestJS CLI
├── tsconfig.json                 # Настройки TypeScript
└── env.template                  # Пример переменных окружения

================================================================
3. ОСНОВНЫЕ КОНЦЕПЦИИ NESTJS
================================================================

🏗️ МОДУЛИ (Modules)
------------------
Модуль = контейнер для группировки связанной функциональности

@Module({
  imports: [OtherModule],        # Подключаемые модули
  controllers: [AuthController], # Контроллеры этого модуля
  providers: [AuthService],      # Сервисы этого модуля
  exports: [AuthService]         # Что экспортируем для других модулей
})

🎮 КОНТРОЛЛЕРЫ (Controllers)
---------------------------
Контроллер = обработчик HTTP запросов (как API routes в Express)

@Controller('auth')              # Базовый путь /auth
export class AuthController {
  
  @Post('login')                 # POST /auth/login
  async login(@Body() loginDto: LoginDto) {
    return this.authService.login(loginDto);
  }
  
  @Get('profile')                # GET /auth/profile
  @UseGuards(JwtAuthGuard)       # Защищенный роут
  getProfile(@Request() req) {
    return req.user;
  }
}

🔧 СЕРВИСЫ (Services)
--------------------
Сервис = бизнес-логика (как хуки в React, но для бэкенда)

@Injectable()
export class AuthService {
  async login(loginDto: LoginDto) {
    // Вся логика аутентификации здесь
  }
}

🛡️ GUARDS (Охранники)
---------------------
Guard = middleware для защиты роутов

@UseGuards(JwtAuthGuard)  # Только авторизованные пользователи

📝 DTO (Data Transfer Objects)
-----------------------------
DTO = схемы валидации данных (как Zod в фронтенде)

export class LoginDto {
  @IsEmail()
  email: string;
  
  @IsString()
  @MinLength(6)
  password: string;
}

================================================================
4. КАК РАБОТАЕТ АУТЕНТИФИКАЦИЯ В НАШЕМ ПРОЕКТЕ
================================================================

🔄 ПОТОК АУТЕНТИФИКАЦИИ:

1. РЕГИСТРАЦИЯ/ЛОГИН:
   Frontend → POST /auth/login → AuthController → AuthService
   
2. ЧТО ПРОИСХОДИТ В AuthService:
   - Находим пользователя по email
   - Проверяем пароль через bcrypt
   - Создаем JWT токен
   - Возвращаем токен + данные пользователя

3. ЗАЩИЩЕННЫЕ РОУТЫ:
   Frontend → GET /auth/profile + Bearer Token → JwtAuthGuard → AuthController

📁 ФАЙЛЫ АУТЕНТИФИКАЦИИ:

auth/auth.controller.ts - API endpoints:
┌─────────────────────────────────────┐
│ POST /auth/register - регистрация   │
│ POST /auth/login    - вход          │
│ GET  /auth/profile  - профиль       │
└─────────────────────────────────────┘

auth/auth.service.ts - логика:
┌─────────────────────────────────────┐
│ register() - создание пользователя  │
│ login()    - проверка и токен       │
│ getProfile() - данные пользователя  │
└─────────────────────────────────────┘

auth/jwt.strategy.ts - проверка токенов:
┌─────────────────────────────────────┐
│ Расшифровка JWT токена              │
│ Поиск пользователя в базе           │
│ Добавление user в req объект        │
└─────────────────────────────────────┘

================================================================
5. ФАЙЛЫ КОНФИГУРАЦИИ
================================================================

📄 main.ts - ЗАПУСК СЕРВЕРА:
---------------------------
- Создание NestJS приложения
- Настройка CORS для фронтенда
- Глобальная валидация
- Запуск на порту 3000

📄 app.module.ts - ГЛАВНЫЙ МОДУЛЬ:
---------------------------------
- Подключает AuthModule
- Настраивает корневые зависимости

📄 auth.module.ts - МОДУЛЬ АВТОРИЗАЦИИ:
--------------------------------------
- Настройка JWT (секретный ключ, время жизни)
- Подключение Passport для аутентификации
- Связывание всех компонентов авторизации

📄 package.json - ЗАВИСИМОСТИ:
-----------------------------
- @nestjs/* - основные пакеты NestJS
- passport* - аутентификация
- bcrypt - хеширование паролей
- class-validator - валидация

📄 nest-cli.json - НАСТРОЙКИ CLI:
--------------------------------
- Компиляция TypeScript
- Структура проекта

================================================================
6. ГДЕ ЧТО НАСТРАИВАТЬ
================================================================

🔧 ХОЧЕШЬ ИЗМЕНИТЬ ПОРТ СЕРВЕРА?
→ main.ts, строка: app.listen(process.env.PORT ?? 3000)

🔧 ХОЧЕШЬ ДОБАВИТЬ НОВОГО ПОЛЬЗОВАТЕЛЯ?
→ user/mock-data.ts, добавь в массив mockUsers

🔧 ХОЧЕШЬ ИЗМЕНИТЬ ВРЕМЯ ЖИЗНИ JWT ТОКЕНА?
→ auth/auth.module.ts, в JwtModule.register({ signOptions: { expiresIn: '24h' } })

🔧 ХОЧЕШЬ ДОБАВИТЬ НОВЫЙ API ENDPOINT?
→ auth/auth.controller.ts, добавь новый метод с декоратором @Post/@Get/@Put/@Delete

🔧 ХОЧЕШЬ ИЗМЕНИТЬ ВАЛИДАЦИЮ?
→ auth/dto/login.dto.ts или register.dto.ts

🔧 ХОЧЕШЬ ДОБАВИТЬ НОВЫЙ МОДУЛЬ?
→ npx nest generate module название
→ npx nest generate controller название
→ npx nest generate service название

🔧 ХОЧЕШЬ ИЗМЕНИТЬ ЛОГИКУ АУТЕНТИФИКАЦИИ?
→ auth/auth.service.ts

🔧 ХОЧЕШЬ ДОБАВИТЬ НОВЫЕ ПОЛЯ ПОЛЬЗОВАТЕЛЯ?
→ user/user.interface.ts (добавь в интерфейс User)
→ user/mock-data.ts (добавь в моковые данные)
→ auth/dto/register.dto.ts (если нужно при регистрации)

================================================================
7. КОМАНДЫ ДЛЯ РАЗРАБОТКИ
================================================================

🚀 ЗАПУСК ПРОЕКТА:
npm run start:dev        # Запуск в режиме разработки (hot reload)
npm run start           # Обычный запуск
npm run start:prod      # Продакшн запуск

🔨 ГЕНЕРАЦИЯ КОДА:
npx nest generate module имя     # Создать модуль
npx nest generate controller имя # Создать контроллер  
npx nest generate service имя    # Создать сервис
npx nest generate guard имя      # Создать guard

🔍 ПРОВЕРКА:
npm run build           # Сборка проекта
npm run test           # Запуск тестов
npm run lint           # Проверка кода

================================================================
8. КАК ИЗУЧАТЬ ДАЛЬШЕ
================================================================

📚 ОФИЦИАЛЬНАЯ ДОКУМЕНТАЦИЯ:
https://docs.nestjs.com/ - лучший источник информации

🎯 ПОШАГОВОЕ ИЗУЧЕНИЕ:

1. БАЗОВЫЕ КОНЦЕПЦИИ (1-2 дня):
   - Модули, Контроллеры, Сервисы
   - Dependency Injection
   - Декораторы

2. HTTP И API (2-3 дня):
   - Request/Response
   - Валидация данных
   - Pipes и Guards

3. БАЗА ДАННЫХ (3-5 дней):
   - TypeORM или Prisma
   - Entities и Relations
   - Миграции

4. ПРОДВИНУТЫЕ ТЕМЫ (1-2 недели):
   - Testing
   - WebSockets
   - Microservices
   - GraphQL

🔥 ПРАКТИЧЕСКИЕ ЗАДАНИЯ:

1. Добавь новый endpoint GET /users - список всех пользователей
2. Создай модуль Posts с CRUD операциями
3. Добавь роли пользователей (admin, user)
4. Подключи реальную базу данных (PostgreSQL)
5. Добавь загрузку файлов

📺 ПОЛЕЗНЫЕ РЕСУРСЫ:

YouTube каналы:
- NestJS официальный канал
- Codevolution - NestJS Tutorial

Курсы:
- Udemy: "NestJS Zero to Hero"
- NestJS Fundamentals (официальный)

GitHub:
- awesome-nestjs - список ресурсов
- nest-samples - примеры кода

================================================================
9. ЧАСТЫЕ ВОПРОСЫ
================================================================

❓ В чем разница между Service и Controller?
→ Controller обрабатывает HTTP запросы
→ Service содержит бизнес-логику

❓ Что такое Dependency Injection?
→ Автоматическое внедрение зависимостей через конструктор
→ NestJS сам создает экземпляры классов и передает их

❓ Зачем нужны DTO?
→ Валидация входящих данных
→ Типизация
→ Автодокументация API

❓ Как работают декораторы?
→ @Controller, @Injectable, @Post - это метаданные
→ NestJS читает их и настраивает приложение

❓ Где хранятся данные без базы данных?
→ В памяти сервера (массив в UserService)
→ При перезапуске все данные теряются

================================================================
10. СТРУКТУРА ЗАПРОСОВ В НАШЕМ ПРОЕКТЕ
================================================================

📨 ДОСТУПНЫЕ API ENDPOINTS:

POST /auth/register
Body: { "name": "Имя", "email": "email@example.com", "password": "пароль123" }
Response: { "access_token": "jwt_token", "user": {...} }

POST /auth/login  
Body: { "email": "john@example.com", "password": "password123" }
Response: { "access_token": "jwt_token", "user": {...} }

GET /auth/profile (требует токен в заголовке)
Headers: { "Authorization": "Bearer jwt_token" }
Response: { "id": 1, "name": "John", "email": "john@example.com", "createdAt": "..." }

🧪 ТЕСТОВЫЕ ПОЛЬЗОВАТЕЛИ:
john@example.com / password123
jane@example.com / password123  
admin@example.com / admin123
alice@example.com / password123
bob@example.com / password123
sarah@example.com / password123
mike@example.com / password123
emma@example.com / password123

================================================================

🎉 ЗАКЛЮЧЕНИЕ:
NestJS - это мощный инструмент для создания backend приложений.
Изучи основы за неделю, но мастерство приходит с практикой!

Начни с малого:
1. Попробуй изменить моковые данные
2. Добавь новый endpoint  
3. Создай новый модуль
4. Подключи базу данных

Удачи в изучении! 🚀