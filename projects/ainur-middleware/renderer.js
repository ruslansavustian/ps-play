const { ipcRenderer } = require("electron");

// –≠–ª–µ–º–µ–Ω—Ç—ã UI
const serverStatus = document.getElementById("serverStatus");
const serverStatusText = document.getElementById("serverStatusText");
const serverPort = document.getElementById("serverPort");
const lastUpdate = document.getElementById("lastUpdate");
const logsContainer = document.getElementById("logsContainer");
const apiConfigForm = document.getElementById("apiConfigForm");

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
let logs = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", () => {
  checkServerStatus();
  updateServerStatusUI("running");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  setInterval(checkServerStatus, 5000);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
  apiConfigForm.addEventListener("submit", handleConfigSubmit);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
  ipcRenderer.on("receipt-processed", handleReceiptProcessed);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerStatus() {
  try {
    const status = await ipcRenderer.invoke("get-server-status");
    updateServerStatusUI(status.status);
    updateServerInfo(status);
  } catch (error) {
    console.error("Error checking server status:", error);
    updateServerStatusUI("stopped");
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
function updateServerStatusUI(status) {
  serverStatus.textContent =
    status === "running" ? "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
  serverStatus.className = `status ${status}`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
function updateServerInfo(status) {
  serverStatusText.textContent =
    status.status === "running" ? "–†–∞–±–æ—Ç–∞–µ—Ç" : "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
  serverPort.textContent = status.port || "3000";
  lastUpdate.textContent = new Date(status.timestamp).toLocaleString("ru-RU");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function handleConfigSubmit(event) {
  event.preventDefault();

  const formData = new FormData(event.target);
  const config = {
    baseURL: document.getElementById("baseURL").value,
    clientName: document.getElementById("clientName").value,
    clientVersion: document.getElementById("clientVersion").value,
  };

  try {
    const result = await ipcRenderer.invoke("update-api-config", config);
    if (result.success) {
      addLog("success", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –æ–±–Ω–æ–≤–ª–µ–Ω—ã", config);
      showNotification("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", "success");
    }
  } catch (error) {
    addLog("error", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", error.message);
    showNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫!", "error");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —á–µ–∫–∞
function handleReceiptProcessed(event, data) {
  const { timestamp, request, response, error, status } = data;

  if (status === "success") {
    addLog("success", `–ß–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ (ID: ${request.custom_id})`, {
      request: request,
      response: response,
    });
  } else {
    addLog("error", `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: ${error}`, {
      request: request,
      error: error,
    });
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞
function addLog(type, message, data = null) {
  const timestamp = new Date().toLocaleString("ru-RU");
  const logEntry = {
    type,
    timestamp,
    message,
    data,
  };

  logs.unshift(logEntry);

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
  if (logs.length > 100) {
    logs = logs.slice(0, 100);
  }

  renderLogs();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–æ–≥–æ–≤
function renderLogs() {
  logsContainer.innerHTML = "";

  logs.forEach((log) => {
    const logElement = document.createElement("div");
    logElement.className = `log-entry ${log.type}`;

    const timestampElement = document.createElement("div");
    timestampElement.className = "log-timestamp";
    timestampElement.textContent = log.timestamp;

    const messageElement = document.createElement("div");
    messageElement.textContent = log.message;

    logElement.appendChild(timestampElement);
    logElement.appendChild(messageElement);

    if (log.data) {
      const dataElement = document.createElement("div");
      dataElement.className = "log-data";
      dataElement.textContent = JSON.stringify(log.data, null, 2);
      logElement.appendChild(dataElement);
    }

    logsContainer.appendChild(logElement);
  });
}

// –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
function clearLogs() {
  logs = [];
  renderLogs();
  showNotification("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã!", "success");
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = "info") {
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const notification = document.createElement("div");
  notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 4px;
        color: white;
        font-weight: bold;
        z-index: 1000;
        background: ${
          type === "success"
            ? "#27ae60"
            : type === "error"
            ? "#e74c3c"
            : "#3498db"
        };
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;
  notification.textContent = message;

  document.body.appendChild(notification);

  // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (notification.parentNode) {
      notification.parentNode.removeChild(notification);
    }
  }, 3000);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
window.checkServerStatus = checkServerStatus;
window.clearLogs = clearLogs;

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ª–æ–≥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
addLog("success", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ", {
  version: "1.0.0",
  timestamp: new Date().toISOString(),
});
